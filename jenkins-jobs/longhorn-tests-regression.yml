- job:
    concurrent: true
    name: longhorn-tests-regression
    project-type: pipeline
    folder: private
    parameters:
      - bool:
          name: SEND_SLACK_NOTIFICATION
          default: true
          description: "send slack notification? (default: true)"
      - bool:
          name: USE_HDD
          default: false
          description: "use HDD as Longhorn disks? (default: false)"
      - string:
          name: NOTIFY_SLACK_CHANNEL
          default: ""
          description: "slack Channel ID to send job notification (default: T02RW4JDH)"
      - bool:
          name: AIR_GAP_INSTALLATION
          default: false
          description: "if set to true, a private registry would be setup and longhorn images would be pulled from it (default: false)"
      - active-choices-reactive:
          name: LONGHORN_INSTALL_METHOD
          description: ""
          script:
            groovy: |-
              if (AIR_GAP_INSTALLATION) {
                return ['manifest-file', 'helm-chart', 'rancher']
              } else {
                return ['custom', 'manifest-file', 'helm-chart', 'rancher']
              }
            use-groovy-sandbox: false
          choice-type: single-select
          referenced-parameters: AIR_GAP_INSTALLATION
      - dynamic-reference:
          name: LONGHORN_INSTALL_VERSION
          description: "version of longhorn to be installed using manifest file or helm chart"
          script:
            groovy: |-
              if (LONGHORN_INSTALL_METHOD.equals('custom')) {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='master' type='text'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - dynamic-reference:
          name: RANCHER_CHART_GIT_REPO
          description: "longhorn rancher chart git repo url (e.g https://github.com/innobead/charts-1.git, https://git.rancher.io/charts)"
          script:
            groovy: |-
              if (LONGHORN_INSTALL_METHOD.equals('rancher')) {
                return "<input class='setting-input jenkins-input' name='value' value='https://github.com/innobead/charts-1.git' type='text'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - dynamic-reference:
          name: RANCHER_CHART_GIT_BRANCH
          description: "longhorn rancher chart git repo branch (e.g longhorn-1.3.1-2.6, release-v2.6)"
          script:
            groovy: |-
              if (LONGHORN_INSTALL_METHOD.equals('rancher')) {
                return "<input class='setting-input jenkins-input' name='value' value='longhorn-1.3.1-2.6' type='text'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - dynamic-reference:
          name: RANCHER_CHART_INSTALL_VERSION
          description: "longhorn rancher chart version to be installed (e.g 100.1.2+up1.2.4, 100.2.1+up1.3.1-rc1)"
          script:
            groovy: |-
              if (LONGHORN_INSTALL_METHOD.equals('rancher')) {
                return "<input class='setting-input jenkins-input' name='value' value='100.2.1+up1.3.1-rc1' type='text'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - dynamic-reference:
          name: LONGHORN_MANAGER_REPO_URI
          description: "longhorn-manager repo URI"
          script:
            groovy: |-
              if (!LONGHORN_INSTALL_METHOD.equals('custom')) {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='https://github.com/longhorn/longhorn-manager.git' type='text'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - dynamic-reference:
          name: LONGHORN_MANAGER_BRANCH
          description: "longhorn-manager repo branch"
          script:
            groovy: |-
              if (!LONGHORN_INSTALL_METHOD.equals('custom')) {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='master' type='text'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - dynamic-reference:
          name: CUSTOM_LONGHORN_MANAGER_IMAGE
          description: "custom longhorn-manager image (e.g USER/longhorn-manager:testing)"
          script:
            groovy: |-
              if (!LONGHORN_INSTALL_METHOD.equals('custom')) {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='longhornio/longhorn-manager:master-head' type='text'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - dynamic-reference:
          name: CUSTOM_LONGHORN_ENGINE_IMAGE
          description: "custom longhorn-engine image (e.g USER/longhorn-engine:testing)"
          script:
            groovy: |-
              if (!LONGHORN_INSTALL_METHOD.equals('custom')) {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='longhornio/longhorn-engine:master-head' type='text'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - dynamic-reference:
          name: CUSTOM_LONGHORN_INSTANCE_MANAGER_IMAGE
          description: "custom longhorn-instance-manager image (e.g USER/longhorn-instance-manager:testing), leave blank to use the default"
          script:
            groovy: |-
              if (!LONGHORN_INSTALL_METHOD.equals('custom')) {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='' type='text'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - dynamic-reference:
          name: CUSTOM_LONGHORN_SHARE_MANAGER_IMAGE
          description: "custom longhorn-share-manager image (e.g USER/longhorn-share-manager:testing), leave blank to use the default"
          script:
            groovy: |-
              if (!LONGHORN_INSTALL_METHOD.equals('custom')) {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='' type='text'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - dynamic-reference:
          name: CUSTOM_LONGHORN_BACKING_IMAGE_MANAGER_IMAGE
          description: "custom backing-image-manager image (e.g USER/backing-image-manager:testing), leave blank to use the default"
          script:
            groovy: |-
              if (!LONGHORN_INSTALL_METHOD.equals('custom')) {
                return "<input class='setting-input jenkins-input' name='value' value='N/A' type='text' disabled style='opacity: 0.5;'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='' type='text'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: LONGHORN_INSTALL_METHOD
      - string:
          name: LONGHORN_TESTS_CUSTOM_IMAGE
          default: "longhornio/longhorn-manager-test:master-head"
          description: "custom longhorn-manager test image, will be used to run tests"

      - dynamic-reference:
          name: PYTEST_CUSTOM_OPTIONS
          description: "pytest custom options to run specific tests (e.g -k test_hosts)"
          script:
            groovy: |-
              if (AIR_GAP_INSTALLATION) {
                return "<input class='setting-input jenkins-input' name='value' value='test_basic.py::test_volume_basic' type='text'>";
              } else {
                return "<input class='setting-input jenkins-input' name='value' value='' type='text'>";
              }
            use-groovy-sandbox: false
          choice-type: formatted-html
          omit-value-field: True
          referenced-parameters: AIR_GAP_INSTALLATION
      - string:
          name: TF_VAR_tf_workspace
          default: /src/longhorn-tests/test_framework
      - bool:
          name: LONGHORN_UPGRADE_TEST
          default: false
          description: "run longhorn upgrade test, then run longhorn test suite"
      - string:
          name: BACKUP_STORE_TYPE
          default: "nfs-and-s3"
          description: "The valid values for this field are 'nfs', 's3' and 'nfs-and-s3'"
      - string:
          name: LONGHORN_STABLE_VERSION
          default: "v1.2.2"
          description: "longhorn version that will be installed before upgrade, effective only when LONGHORN_UPGRADE_TEST is TRUE"
      - string:
          name: LONGHORN_TEST_CLOUDPROVIDER
          default: "aws"
          description: "cloudprovider used to run test suite, supported values:[aws]"
      - string:
          name: AWS_REGION
          default: "us-east-1"
          description: "aws region (e.g us-east-1), effective only when using aws as cloudprovider"
      - string:
          name: AWS_AVAILABILITY_ZONE
          default: "us-east-1c"
          description: "aws availability zone (e.g us-east-1c), effective only when using aws as cloudprovider, choosed based on AWS_REGION value"
      - string:
          name: ARCH
          default: "amd64"
          description: "architecture of created instances used to run integration tests, supported values: [amd64, arm64]"
      - string:
          name: K8S_DISTRO_NAME
          default: "k3s"
          description: "kubernetes distro version to install [rke, k3s] (default: k3s)"
      - string:
          name: K8S_DISTRO_VERSION
          default: "v1.23.1+k3s2"
          description: |
              kubernetes version that will be deployed
              for rke: (default: v1.22.5-rancher1-1)
              for k3s: (default: v1.23.1+k3s2)
      - string:
          name: DISTRO
          default: "sles"
          description: "Linux distro used to install on created instances, supported values: [ubuntu, rhel, sles, centos, oracle, rockylinux]"
      - string:
          name: DISTRO_VERSION
          default: "15-sp3-v20210622"
          description: |
             Linux distro version to install on created instances, choosed based on DISTRO values
             for DISTRO=ubuntu, supported values: [18.04, 20.04], default: [20.04]
             for DISTRO=rhel, supported values: [7.9 ,8.3, 8.4.0], default: [8.3]
             for DISTRO=sles, supported values: [15-sp3-v20210622], default: [15-sp3-v20210622]
             for DISTRO=centos, supported values: [8.4], default: [8.4]
             for DISTRO=oracle, supported values: [8.3], default: [8.3]
             for DISTRO=rockylinux, supported values: [8.4], default: [8.4]
      - string:
          name: CONTROLPLANE_INSTANCE_TYPE
          default: "t2.xlarge"
          description: "aws instance type for controlplane nodes"
      - string:
          name: WORKER_INSTANCE_TYPE
          default: "t2.xlarge"
          description: "aws instance type for worker nodes"
      - choice:
          name: SELINUX_MODE
          choices:
          - ""
          - permissive
          - enfrocing
          description: "SELINUX mode [permissive | enforcing] (available only for CentOS and RedHat)"
    pipeline-scm:
      scm:
        - git:
            url: https://github.com/longhorn/longhorn-tests
            branches:
              - master
      script-path: test_framework/Jenkinsfile
      lightweight-checkout: true
